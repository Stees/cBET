#! /usr/bin/env python
#code will determine the greatest interaction energy for each molecule calculation pair, and provide a convenient view of final and initial positions for the optimization

import subprocess
import readline
import shutil
from re import sub
from collections import defaultdict
from decimal import *
import numpy as np
import time
import operator


#set decimal context
getcontext().prec = 14
getHost = subprocess.Popen('hostname', stdout=subprocess.PIPE)
host = getHost.communicate()[0].split()[0]
#determine filesystem
FS = subprocess.Popen('pwd', stdout=subprocess.PIPE)
fs = str(FS.communicate()[0].split())


if 'login0.crc.pitt.edu' in host and 'ihome' in fs:
    def moveBest( trajLoc, finalLoc, iS, lML ):
        trajectoryMoveLocation = trajLoc+iS+'OptimumTrajectory.xyz'
        configurationMoveLocation = finalLoc + iS + 'OptimumConfiguration.xyz'
        try:
            copyTrajectory = subprocess.Popen(r'cp -f *-pos-1.xyz {0}'.format(trajectoryMoveLocation), cwd=lML, shell=True)
            subprocess.Popen('createFinalPositionsCP2K', stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=lML, shell=True)
            #print('{0}\n'.format(lML))
            time.sleep(1)
            copyConfiguration = subprocess.Popen('cp -f finalPositions* {0}'.format(configurationMoveLocation), cwd=lML, shell=True)
        except:
            #print('\nUnable to make finalPositions file at {0}\n'.format(lML))
            pass
        return


    def calculationStatus( oLocation, aJobs, Minimum, Index, localMinLocation, goodOpts, specie ):
        tempListEnergies = []
        tempListConfigs = []
        #ls the number directories for each interaction pair
        nums = subprocess.Popen(r'ls -d */', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=oLocation, shell=True)
        numbers = nums.communicate()[0].split()
        #find the mimimum and corresponding index for each calculation
        if 'ls:' != numbers[0]:
            for number in numbers:
                innerLocation = oLocation + str(number)
                files2 = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd=innerLocation)
                fileNames2 = files2.communicate()[0].split()
                if "geometryOptimization.out" in fileNames2 and any("restart" in entry for entry in fileNames2):
                    calcSuccess2 = subprocess.Popen('grep "GEOMETRY OPTIMIZATION COMPLETED" geometryOptimization.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    calcFlag2 = calcSuccess2.communicate()[0]
                    if "OPTIMIZATION" in str(calcFlag2):
                        if "finalPositions"+specie+'_'+number+'.xyz' not in fileNames2:
                            subprocess.Popen("bash -c 'createFinalPositionsCP2K'", cwd=innerLocation, shell=True)
                        getEnergy = subprocess.Popen('grep "ENERGY| Total FORCE_EVAL" geometryOptimization.out | tail -n 1', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                        v = Decimal(getEnergy.communicate()[0].split()[8])
                        tempListEnergies.append(v)
                        tempListConfigs.append(number)
                        goodOpts = goodOpts + 1
                        if v < Minimum:
                            Minimum = v
                            Index = number
                            localMinLocation = innerLocation
                        #move the calculation to zfs. This needs to discriminate between interactions and single molecules
                        if 'zfs1' not in innerLocation:
                            try:
                                if 'interactions' in oLocation:
                                    subprocess.Popen('bash -c "mv {0} /zfs1/kjohnson/jpr54/cp2k/interactions/{1}/"'.format(innerLocation, specie), shell=True)
                                elif 'single' in oLocation:
                                    subprocess.Popen('bash -c "mv {0} /zfs1/kjohnson/jpr54/cp2k/singleMolecules/{1}/"'.format(innerLocation, specie), shell=True)
                            except:
                                print('Trouble moving {0} to zfs.\n'.format(innerLocation))
                    else:
                        getNumber = subprocess.Popen("bash -O extglob -c 'ls !(*.*)'", stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                        tempNumber = getNumber.communicate()[0].split()[0]
                        if tempNumber not in aJobs:
                            print('\n\n\n*****Walltime likely exceeded*****\n{0}\n'.format(innerLocation))
                            print('Restarting...\n')
                            #open the jobscript, replace the name of the input file with the name of the restart file
                            jobfile = open(innerLocation+'job.slurm','r')
                            modLines = jobfile.readlines()
                            jobfile.close()
                            newJobFile = open(innerLocation+'newJob.slurm','w')
                            for line in modLines:
                                if "mpirun -np $SLURM_NTASKS $(which cp2k.popt) -i geometryOptimization" in line:
                                    newJobFile.write('mpirun -np $SLURM_NTASKS $(which cp2k.popt) -i {0}-1.restart -o geometryOptimization.out\n'.format(specie+'_'+number.split('/',1)[0]))
                                else:
                                    newJobFile.write(line)
                            newJobFile.close()
                            changeName = subprocess.Popen('mv newJob.slurm job.slurm', cwd=innerLocation, shell=True)
                            #start the job
                            subprocess.Popen("bash -O extglob -c 'ls !(*.*) | xargs rm'", cwd=innerLocation, shell=True)
                            startJob = subprocess.Popen('sbatch job.slurm', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                            jobNumber = startJob.communicate()[0].split()[3]
                            print('{0} {1}'.format(jobNumber,specie+'_'+number))
                            #write the new job number
                            subprocess.Popen("bash -O extglob -c 'touch {0}'".format(jobNumber), cwd=innerLocation, shell=True)
                if number == numbers[-1]:
                    moveBest( trajectoryLocation, finalConfigurationLocation, specie, localMinLocation )
            return(Minimum,Index,localMinLocation,tempListEnergies,tempListConfigs,goodOpts)
        elif 'ls:' == numbers[0]:
            print('Likely that an error occured with {0}, as there is no number in the directory\n'.format(oLocation))

#***************************part 1**********************************
    trajectoryLocation = '/zfs1/kjohnson/jpr54/cp2k/bestInteractionTrajectories/'
    finalConfigurationLocation = '/zfs1/kjohnson/jpr54/cp2k/finalConfigurations/'
    #figure out what is in the queue for BOTH queues and combine
    currentJobs1 = subprocess.Popen("squeue -u $USER -o '%7i%24j%8u' | grep 'jpr54' | awk '{print $1;}'", stdout=subprocess.PIPE, shell=True)
    currentJobs2 = subprocess.Popen("squeue -M mpi -u $USER -o '%7i%24j%8u' | grep 'jpr54' | awk '{print $1;}'", stdout=subprocess.PIPE, shell=True)
    activeJobs1 = currentJobs1.communicate()[0].split()
    activeJobs2 = currentJobs2.communicate()[0].split()
    activeJobs = activeJobs1 + activeJobs2
    
    #identify all the energies of the single molecules
    sStructures = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd='/ihome/kjohnson/jpr54/cp2k/singleMolecules/')
    singleMolecules1 = sStructures.communicate()[0].split()
    zStructures = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd='/zfs1/kjohnson/jpr54/cp2k/singleMolecules/')
    singleMolecules2 = zStructures.communicate()[0].split()
    singleMolecules = singleMolecules1 + singleMolecules2
    d = defaultdict(list)
    d3 = defaultdict(list)
    for structure in singleMolecules:
        if structure.lower() not in d.keys():
            k = structure.lower()
            tempListAllEnergies = []
            tempListAllConfigs = []
            appendEnergies = []
            appendConfigs = []
            minimum = 0
            index = 0
            optSuccess = 0
            localMinimumLocation = ''
            if structure in singleMolecules1:
                outerLocation = '/ihome/kjohnson/jpr54/cp2k/singleMolecules/' + structure + '/'
                minimum, index, localMinimumLocation, tempListAllEnergies, tempListAllConfigs, optSuccess = calculationStatus( outerLocation, activeJobs, minimum, index, localMinimumLocation, optSuccess, structure )
            if structure in singleMolecules2:
                outerLocation = '/zfs1/kjohnson/jpr54/cp2k/singleMolecules/' + structure + '/'
                minimum, index, localMinimumLocation, appendEnergies, appendConfigs, optSuccess = calculationStatus( outerLocation, activeJobs, minimum, index, localMinimumLocation, optSuccess, structure )
                tempListAllEnergies = tempListAllEnergies + appendEnergies
                tempListAllConfigs = tempListAllConfigs + appendConfigs
            d[k].append(minimum)
            d[k].append(index)
            d[k].append(optSuccess)
            d3[k].append(tempListAllEnergies)
            d3[k].append(tempListAllConfigs)
            d3[k].append(optSuccess)


#**************************Part 2*****************************
    #get the names of the interaction configurations
    iStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd='/ihome/kjohnson/jpr54/cp2k/interactions/', shell=True)
    zStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd='/zfs1/kjohnson/jpr54/cp2k/interactions/', shell=True)
    interactionsi = iStructures.communicate()[0].split()
    interactionsz = zStructures.communicate()[0].split()
    interactions = interactionsi + interactionsz
    #make sure there are mirroring directories for everything on ihome on zfs
    for pair in interactionsi:
        if pair not in interactionsz:
            subprocess.Popen('mkdir /zfs1/kjohnson/jpr54/cp2k/interactions/{0}'.format(pair), shell=True)
    time.sleep(0.10)
    #make another dictionary for the interaction calculation energies
    d2 = defaultdict(list)
    #get the most negative energy for each interaction, and every energy for the interaction 
    for iStruct in (interactions):
        if iStruct not in d2.keys():
            tempListAllEnergies = []
            tempListAllConfigs = []
            appendEnergies = []
            appendConfigs = []
            minimum = 0
            index = 0
            optSuccess = 0
            localMinimumLocation = ''
            k = iStruct
            if iStruct in interactionsz:
                outerLocation = '/zfs1/kjohnson/jpr54/cp2k/interactions/' + iStruct + '/'
                minimum, index, localMinimumLocation, tempListAllEnergies, tempListAllConfigs, optSuccess = calculationStatus( outerLocation, activeJobs, minimum, index, localMinimumLocation, optSuccess, iStruct )
            if iStruct in interactionsi:
                outerLocation = '/ihome/kjohnson/jpr54/cp2k/interactions/' + iStruct + '/'
                minimum, index, localMinimumLocation, appendEnergies, appendConfigs, optSuccess = calculationStatus( outerLocation, activeJobs, minimum, index, localMinimumLocation, optSuccess, iStruct )
                tempListAllEnergies = tempListAllEnergies + appendEnergies
                tempListAllConfigs = tempListAllConfigs + appendConfigs
                
            d2[k].append(minimum)
            d2[k].append(index)
            d2[k].append(optSuccess)
            d3[k].append(tempListAllEnergies)
            d3[k].append(tempListAllConfigs)
            d3[k].append(optSuccess)

#*******************Part 3: data output***********************
    #calculate the interaction energies
    #allow for selection of only specific analyte to print
    filter = 6
    switchType = 1
    while (switchType != 0):
        while (filter != 1 and filter != 2 and filter != 3 and filter != 4 and filter != 5):
            if (filter != 6):
                print('\nLikely invalid entry. Try again.\n\n')
            f1 = raw_input('\n\nTo print energies for all pairs, type 1.\nTo filter data, type 2.\nTo print all interaction energies for a single pair, type 3.\nTo print all energies for single molecules, type 4.\nTo exit, type 5.\n')
            if not f1:
                print('\nEnter a value\n')
                filter = 6
            else:
                try:
                    filter = int(f1)
                except ValueError:
                    print('\nInvalid entry. Try again.\n')
            if (filter == 1):
                #for each key in d2, split the key at the underscore.
                for key in d2:
                    singleMols = key.split("_")
                    energy1 = d.get(singleMols[0].lower())
                    energy2 = d.get(singleMols[1].lower())
                    try:
                        interE = d2.get(key)
                        print('\n{0:40}\tconfiguration {1} out of {2} converged'.format(key,interE[1].replace("/",""),interE[2]))
                        #2625.5 is conversion factor between hartree and kJ/mol
                        bindingEnergy = Decimal(str(2625.5))*(interE[0] - (energy1[0] + energy2[0]))
                        print('{0} kJ/mol'.format(bindingEnergy))
                    except:
                        print('\nNo data for {0} yet.\n'.format(singleMols))
            elif (filter == 2):
                agent = 'apple'
                flag = 0
                while (agent != 'owl'):
                    dataList = []
                    if (agent != 'apple'):
                        if (agent == 'more'):
                            print('\nJust one second...\n')
                            time.sleep(0.55)
                        else:
                            print('\nLikely invalid entry. Try again.\n\n')
                    agent = raw_input('Enter the name of an agent.\n')
                    for key in d2:
                        if agent in key:
                            flag = 1
                            singleMols = key.split("_")
                            energy1 = d.get(singleMols[0].lower())
                            energy2 = d.get(singleMols[1].lower())
                            try:
                                interE = d2.get(key)
                                #2625.5 is conversion factor between hartree and kJ/mol
                                bindingEnergy = Decimal('2625.5')*(interE[0] - (energy1[0] + energy2[0]))
                                tempList = [key, bindingEnergy, interE[1].replace("/",""), interE[2]]
                                dataList.append(tempList)
                            except:
                                print('\nNo data for {0} yet.'.format(singleMols))
                    #sort dataList and print it
                    dataListFinal = sorted(dataList, key=operator.itemgetter(1))
                    for row in range(0,len(dataListFinal)):
                        print('\n{0:40}\tconfiguration {1} out of {2} converged.'.format(dataListFinal[row][0],dataListFinal[row][2],dataListFinal[row][3]))
                        print('{0} kJ/mol'.format(dataListFinal[row][1]))
                    if (flag == 1):
                        repeat = 's'
                        while (repeat != 'y' and repeat != 'n'):
                            if (repeat != 's'):
                                print('\nInvalid entry. Try again.\n')
                            repeat = raw_input('\nAdditional data needed? (y/n)\n')
                            if not repeat:
                                print('\nEnter a value\n')
                                repeat = 's'
                            if (repeat == 'y'):
                                agent = 'more'
                            elif (repeat == 'n'):
                                agent = 'owl'
            elif (filter == 3):
                #print all binding energies for a specified molecule pair
                agent = 'apple'
                flag = 0
                while (agent != 'owl'):
                    dataList = []
                    pairArrayPre = []
                    pairArray = []
                    if (agent != 'apple'):
                        if (agent == 'more'):
                            print('\nJust one second...\n')
                            time.sleep(0.50)
                        else:
                            print('\nLikely invalid entry. Try again.')
                    print('\nInteraction Pairs:')
                    for key in d2:
                        pairArrayPre.append(key)
                    pairArray = sorted(pairArrayPre, key=str.lower)
                    for counter, mols in enumerate(pairArray):
                        print('{0}: {1}'.format(counter,mols))
                    pairs = raw_input('\nEnter the numbers corresponding to interaction pairs for which you need data.\nInvalid entries will be ignored, and calculations without results yet will print the pair name with no energies.\n')
                    if not pairs:
                        print('\nEnter a value.\n')
                        time.sleep(0.10)
                    pairList = np.unique(np.array([int(s) for s in pairs.split() if s.isdigit()]))
                    for pair in pairList:
                        if (pair <= counter):
                            print('\n{0}'.format(pairArray[pair]))
                            time.sleep(0.10)
                            flag = 1
                            singleMols = pairArray[pair].split("_")
                            energy1 = d.get(singleMols[0].lower())
                            energy2 = d.get(singleMols[1].lower())
                            interE = d3.get(pairArray[pair])
                            for j, step in enumerate(interE[0]):
                                bindingEnergy = Decimal('2625.5')*(step - (energy1[0] + energy2[0]))
                                tempList = [interE[1][j].replace("/",""), bindingEnergy]
                                dataList.append(tempList)
                    dataListFinal = sorted(dataList, key=operator.itemgetter(1))
                    for row in range(0,len(dataListFinal)):
                        print('configuration {0}:\t{1} kJ/mol\n'.format(dataListFinal[row][0],dataListFinal[row][1]))
                    print('{0} total converged configurations.\n'.format(interE[2]))
                    if (flag == 1):
                        repeat = 's'
                        while (repeat != 'y' and repeat != 'n'):
                            if (repeat != 's'):
                                print('\nInvalid entry. Try again.\n')
                            repeat = raw_input('\nAdditional data needed? (y/n)\n')
                            if not repeat:
                                print('\nEnter a value\n')
                                repeat = 's'
                            if (repeat == 'y'):
                                agent = 'more'
                            elif (repeat == 'n'):
                                agent = 'owl'
            elif (filter == 4):
                #print all binding energies for a specified molecule
                agent = 'apple'
                flag = 0
                while (agent != 'owl'):
                    dataList = []
                    arrayPre = []
                    array = []
                    if (agent != 'apple'):
                        if (agent == 'more'):
                            print('\nJust one second...\n')
                            time.sleep(0.50)
                        else:
                            print('\nLikely invalid entry. Try again.')
                    print('\nOptimized Energies:')
                    for key in d:
                        arrayPre.append(key)
                    array = sorted(arrayPre, key=str.lower)
                    for counter, entry in enumerate(array):
                        print('{0}: {1}'.format(counter,entry))
                    molecules = raw_input('\nEnter the numbers corresponding to molecules for which you need data.\nInvalid entries will be ignored, and calculations without results yet will print the pair name with no energies.\n')
                    if not molecules:
                        print('\nEnter a value.\n')
                        time.sleep(0.10)
                    moleculeList = np.unique(np.array([int(s) for s in molecules.split() if s.isdigit()]))
                    for molecule in moleculeList:
                        if (molecule <= counter):
                            print('\n{0}'.format(array[molecule]))
                            time.sleep(0.10)
                            flag = 1
                            # singleMols = array[molecule]
                            interE = d3.get(array[molecule])
                            for j, step in enumerate(interE[0]):
                                energy = Decimal('2625.5')*step
                                tempList = [interE[1][j].replace("/",""), energy]
                                dataList.append(tempList)
                    dataListFinal = sorted(dataList, key=operator.itemgetter(1))
                    for row in range(0,len(dataListFinal)):
                        print('configuration {0}:\t{1} kJ/mol\n'.format(dataListFinal[row][0],dataListFinal[row][1]))
                    print('{0} total converged configurations.\n'.format(interE[2]))
                    if (flag == 1):
                        repeat = 's'
                        while (repeat != 'y' and repeat != 'n'):
                            if (repeat != 's'):
                                print('\nInvalid entry. Try again.\n')
                            repeat = raw_input('\nAdditional data needed? (y/n)\n')
                            if not repeat:
                                print('\nEnter a value\n')
                                repeat = 's'
                            if (repeat == 'y'):
                                agent = 'more'
                            elif (repeat == 'n'):
                                agent = 'owl'
            elif (filter == 5):
                    switchType = 0
        if (switchType == 1):
            roll = 0
            while (roll != 1):
                tempControl = raw_input('\nDo you need to do additional operations? (y/n)\n')
                if (tempControl == 'y'):
                    print('\nJust one second.\n')
                    time.sleep(0.5)
                    roll = 1
                    filter = 6
                elif (tempControl == 'n'):
                    switchType = 0
                    roll = 1
                else:
                    print('\nPlease try again.\n')  
elif 'ihome' not in fs:
    print('{0}'.format(fs))
    print('\n\nYou need to cd to ihome.\n')
else:
    print('\nYou are logged in to the wrong place. Log in to opa.\n')

